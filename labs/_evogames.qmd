## Evolutionary games

1.  **The Prisoners Dilemma Competition**. In this class we will have a competition of algorithms for playing the prisoner’s dilemma.

    a)  Write a function that takes as parameters two vectors that account with the history of the previous plays and returns one play (i.e., Cooperate – “C” or defect – “D”). This play should try to be the best response to the history of past moves. One example of such a function is:

    ``` r
    strat<-function(own,opponent)
    {
        n <- length(opponent)
             if(n==0) "D"
            else
                if(own[n]=="D") opponent[n]
               else "C"
    }
    ```

    b)  Use the function pd_sim (see below) to play your strategy with the strategy of the other groups (ask for each group their function(s)) and with itself, in an iterative game with x moves. Compare the results of the cumulative rewards as well as the sequence of moves. Report to the rest of groups the values of the rewards for each of the tournaments. What was the best strategy? What strategies are best responses to themselves?

    ```{r eval=FALSE}
    pd_sim<-function(p1_strat,p2_strat,n)
    {
     w1<-0          #accumulated pay-off (fitness) of player 1
     w2<-0          #accumulated pay-offs of player 2
     h1<-NULL     #history of plays of player 1
     h2<-NULL     #history of plays of player 2
     
     for (t in 1:n)            
       {
       	a1<-p1_strat(h1,h2) 
    	a2<-p2_strat(h2,h1) 
    	p1<-mat[a1,a2] 
    	p2<-mat[a2,a1]         
       	w1<-w1+p1              
       	w2<-w2+p2             
       	h1[t]<-a1                 	
    h2[t]<-a2                 	}	
     list(w1=w1,w2=w2,h1=h1,h2=h2)
    }
    ```
